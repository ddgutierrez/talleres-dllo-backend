import { Request, Response } from "express";
import { UserModel, UserType } from "./user.model";
import bcrypt from 'bcrypt';

// Action to create a new user
export async function createUser(req: Request, res: Response) {
    const { name, email, password, permissions } = req.body as Omit<UserType, '_id'>;

    // Validate required fields
    if (!name || typeof name !== 'string') {
        return res.status(400).json({ message: "Name is required and must be a string" });
    }
    if (!email || typeof email !== 'string') {
        return res.status(400).json({ message: "Email is required and must be a string" });
    }
    if (!password || typeof password !== 'string') {
        return res.status(400).json({ message: "Password is required and must be a string" });
    }
    if (!Array.isArray(permissions) || !permissions.every(p => typeof p === 'string')) {
        return res.status(400).json({ message: "Permissions must be an array of strings" });
    }

    try {
        // Hash the password
        const hashedPassword = await bcrypt.hash(password, 10);

        // Create a new User instance, no need to pass _id as it will be auto-generated by MongoDB
        const newUser = new UserModel({
            name,
            email,
            password: hashedPassword,
            permissions,
            active: true
        });

        // Save the user to MongoDB
        const savedUser = await newUser.save();
        return res.status(201).json({ message: "User created", user: savedUser });
    } catch (err: any) {
        const errorMessage = err instanceof Error ? err.message : "An unknown error occurred";
        return res.status(500).json({ message: "Error creating user", error: errorMessage });
    }
}